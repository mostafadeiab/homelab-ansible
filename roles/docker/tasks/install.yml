---
# Set the docker_arch fact based on the architecture
- name: Set amd64 architecture
  ansible.builtin.set_fact:
    docker_arch: "amd64"
  when: ansible_architecture == "x86_64"

- name: Set arm64 architecture
  ansible.builtin.set_fact:
    docker_arch: "arm64"
  when: ansible_architecture == "aarch64"

# Install Docker dependencies
- name: Install Docker dependencies
  ansible.builtin.package:
    name: "{{ docker_dependencies }}"
    state: present

# Add Docker GPG key for apt (for Ubuntu/Debian)
- name: Add Docker GPG key for apt
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    state: present
  when: ansible_distribution in ["Ubuntu", "Debian"]

# Add Docker repository for apt (for Ubuntu/Debian)
- name: Add Docker repository for apt
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
  when: ansible_distribution in ["Ubuntu", "Debian"]

# Install Docker packages
- name: Install Docker packages
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: present

# Ensure Docker group exists
- name: Ensure Docker group exists
  ansible.builtin.group:
    name: docker
    state: present

# Add the user to the Docker group
- name: Add {{ username }} to Docker group
  ansible.builtin.user:
    name: "{{ username }}"
    groups: docker
    append: true

# Enable and start the Docker service
- name: Enable and start Docker service
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started

# Create a custom docker network (this example uses the name "homelab"; adjust as needed)
- name: Create custom Docker network "homelab"
  community.docker.docker_network:
    name: homelab
    state: present
    driver: bridge
